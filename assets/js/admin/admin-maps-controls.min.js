/**
 *  Maps Directions
 *
 *  @description: Adds directions functionality to the maps builder
 *  @copyright: http://opensource.org/licenses/gpl-2.0.php GNU Public License
 *  @since: 2.0
 */
var gmb_data,gmb_upload_marker,trafficLayer=new google.maps.TrafficLayer,transitLayer=new google.maps.TransitLayer,bicycleLayer=new google.maps.BicyclingLayer,placeSearchAutocomplete;!function(e){"use strict";/**
	 * Set Map Layers
	 *
	 * @description Toggles various layers on and off
	 * @param layer obj
	 */
function t(e){if(!e)return!1;var t=e.val(),a=e.prop("checked");switch(t){case"traffic":trafficLayer.setMap(a?window.map:null);break;case"transit":transitLayer.setMap(a?window.map:null);break;case"bicycle":bicycleLayer.setMap(a?window.map:null)}}/**
	 * Toggle Places Search Field
	 * @descrition: Adds and removes the places search field from the map preview
	 * @param input
	 */
function a(t){
//Setup search or Toggle show/hide?
"undefined"==typeof placeSearchAutocomplete&&t.prop("checked")===!0?(o(),//hasn't been setup yet, so set it up
e("#places-search").show()):t.prop("checked")===!0&&"object"==typeof placeSearchAutocomplete?e("#places-search").show():e("#places-search").hide()}/**
	 * Set up Places Search Field
	 *
	 * @description Creates the Google Map custom control with autocomplete enabled
	 *
	 */
function o(){
// Sets a listener on a radio button to change the filter type on Places
// Autocomplete.
function e(e,t){var a=document.getElementById(e);google.maps.event.addDomListener(a,"click",function(){placeSearchAutocomplete.setTypes(t)})}{var t=/** @type {HTMLInputElement} */document.getElementById("pac-input");document.getElementById("type-selector")}map.controls[google.maps.ControlPosition.TOP_CENTER].push(document.getElementById("places-search")),placeSearchAutocomplete=new google.maps.places.Autocomplete(t),placeSearchAutocomplete.bindTo("bounds",map);var a=new google.maps.InfoWindow,o=new google.maps.Marker({map:map,anchorPoint:new google.maps.Point(0,-29)});google.maps.event.addListener(placeSearchAutocomplete,"place_changed",function(){a.close(),o.setVisible(!1);var e=placeSearchAutocomplete.getPlace();if(!e.geometry)return void window.alert("Autocomplete's returned place contains no geometry");
// If the place has a geometry, then present it on a map.
e.geometry.viewport?map.fitBounds(e.geometry.viewport):(map.setCenter(e.geometry.location),map.setZoom(17)),o.setIcon(/** @type {google.maps.Icon} */{url:e.icon,size:new google.maps.Size(71,71),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(35,35)}),o.setPosition(e.geometry.location),o.setVisible(!0);var t="";e.address_components&&(t=[e.address_components[0]&&e.address_components[0].short_name||"",e.address_components[1]&&e.address_components[1].short_name||"",e.address_components[2]&&e.address_components[2].short_name||""].join(" ")),a.setContent("<div><strong>"+e.name+"</strong><br>"+t),a.open(map,o)}),e("changetype-all",[]),e("changetype-address",["address"]),e("changetype-establishment",["establishment"]),e("changetype-geocode",["geocode"]),
//Tame the enter key to not save the widget while using the autocomplete input
google.maps.event.addDomListener(t,"keydown",function(e){13==e.keyCode&&e.preventDefault()})}/**
	 * Goto Location Autocomplete
	 *
	 */
function n(){var t=e(".map-autocomplete-wrap"),a=e("#map-location-autocomplete").get(0),o=new google.maps.places.Autocomplete(a);o.bindTo("bounds",map),google.maps.event.addListener(o,"place_changed",function(){var a=o.getPlace();
// If the place has a geometry, then present it on a map.
//Close modal
return a.geometry?(a.geometry.viewport?map.fitBounds(a.geometry.viewport):(map.setCenter(a.geometry.location),map.setZoom(17)),e(t).find(".mfp-close").trigger("click"),void i(t)):void window.alert("Autocomplete's returned place contains no geometry")}),
//Tame the enter key to not save the widget while using the autocomplete input
google.maps.event.addDomListener(a,"keydown",function(e){13==e.keyCode&&e.preventDefault()})}/**
	 * Close a Modal within Modal
	 *
	 * @param modal
	 */
function i(t){
// Move back out of container
e(t).addClass("mfp-hide").appendTo(".modal-placeholder").unwrap()}/**
	 * Edit Title within Modal
	 */
function r(){
//When edit title button is clicked insert title into feax input
e(".edit-title").on("click",function(){e("#modal_title").val(e("input#title").val())}),
//when feax title input is changed update default title field
e("#modal_title").on("blur",function(){e("input#title").val(e(this).val())})}/**
	 * Update Toolbar Lat/Lng
	 */
function l(){var t=e(".lat-lng-update-btn"),a=e(".update-lat-lng"),o=map.getCenter();e(".live-latitude").text(o.lat()),e(".live-longitude").text(o.lng()),a.attr("data-lat",o.lat()),e(".lat-lng-change-message").slideDown(),a.attr("data-lng",o.lng()),t.attr("data-lat",o.lat()),t.attr("data-lng",o.lng()),t.removeAttr("disabled"),a.removeAttr("disabled")}/**
	 * Kick it off on Window Load
	 */
e(window).on("load",function(){
//Layers
e(".cmb2-id-gmb-layers input").on("change",function(){t(e(this))}),
//Loop through layers
e(".cmb2-id-gmb-layers input:checkbox").each(function(){t(e(this))});
//Places Search
var o=e(".cmb2-id-gmb-places-search input");o.on("change",function(){a(e(this))}),a(o),
//Autocomplete
n(),
//Edit Title
r(),
//Set lng and lat when map dragging
google.maps.event.addListener(map,"drag",function(){l()}),
//Set lng and lat when map dragging
google.maps.event.addListener(map,"dragend",function(){l()}),
//Set lng and lat when map dragging
google.maps.event.addListener(map,"zoom_changed",function(){l()}),
//Initialize Magnific/Modal Functionality Too
e("body").on("click",".gmb-magnific-inline",function(t){t.preventDefault();var a="."+e(this).data("target");//target element class name
//Modal in modal?
//We can't have a magnific inside magnific so CSS3 modal it is
if(e.magnificPopup.instance.isOpen===!0){
//Open CSS modal
e(a).before('<div class="modal-placeholder"></div>').removeClass("mfp-hide").appendTo(".magnific-builder #poststuff");// Move the element to container
//Check if wrapped properly
var o=e(a).find(".inner-modal-wrap"),n=e(a).find(".inner-modal-container");
//Not wrapped, wrap it
0==o.length&&0==n.length&&(e(a).addClass("white-popup").wrapInner('<div class="inner-modal-wrap"><div class="inner-modal-container"><div class="inner-modal clearfix"></div></div></div>'),e('<button type="button" class="gmb-modal-close">&times;</button>').prependTo(e(a).find(".inner-modal"))),
//Add close functionality to outside overlay
e(a).on("click",function(t){
//only on overlay
(e(t.target).hasClass("inner-modal-wrap")||e(t.target).hasClass("inner-modal-container"))&&
// Move back out of container
i(a)}),
//Close button
e(".gmb-modal-close").on("click",function(){i(a)})}else e.magnificPopup.open({callbacks:{beforeOpen:function(){e(a).addClass("white-popup")}},items:{src:e(a),type:"inline"},midClick:!0})}),
//Custom marker modal uploader
gmb_upload_marker={
// Call this from the upload button to initiate the upload frame.
uploader:function(){
//@TODO: i18n
var e=wp.media({title:"Set an Custom Marker Icon",multiple:!1,library:{type:"image"},button:{text:"Set Marker"}});
// Handle results from media manager.
return e.on("close",function(){var t=e.state().get("selection").toJSON();gmb_upload_marker.render(t[0])}),e.open(),!1},
// Output Image preview
render:function(t){e(".gmb-image-preview").prepend(gmb_upload_marker.imgHTML(t)),e(".gmb-image-preview").html(gmb_upload_marker.imgHTML(t)),e(".gmb-image-preview").show(),e(".save-marker-icon").slideDown(),//slide down save button
e(".save-marker-button").data("marker-image",t.url)},
// Render html for the image.
imgHTML:function(e){var t='<img src="'+e.url+'" ';return t+='width="'+e.width+'" ',t+='height="'+e.height+'" ',""!=e.alt&&(t+='alt="'+e.alt+'" '),t+="/>"},
// User wants to remove the avatar
removeImage:function(t){e("#"+t+"attachment_id").val(""),e("#"+t+"imageurl").val(""),e("#"+t+"preview img").remove(),e("#"+t+"preview a").hide()}}})}(jQuery);